name: GHAction example

on:
  workflow_dispatch:
  push:
    tags:
    - 'v*'

jobs:
  ci_step:
    name: Build, scan, and push Docker image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write 
      
    steps:
      - 
        name: Check out the source_repo
        uses: actions/checkout@v4
      
      -
        name: Docker metadata definitions for DockerHub
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_USERNAME }}/example
          flavor: latest=false
          tags: |
            type=sha,priority=100,prefix=sha-,format=short
            type=semver,priority=200,pattern={{version}}   

      - 
        name: QEMU set-up
        uses: docker/setup-qemu-action@v3

      - 
        name: Buildx set-up
        uses: docker/setup-buildx-action@v3

      - 
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - 
        name: Build and push Docker image to DockerHub
        id: build_and_push_dockerhub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: |
            type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/example:cache 
          cache-to: |
            type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/example:cache  
          tags: ${{ steps.meta-dockerhub.outputs.tags }}
      
      - name: Scan for vulnerabilities
        id: docker-scout-cves
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.meta-dockerhub.outputs.tags }}
          sarif-file: sarif.output.json
          summary: true
      
      - name: Check for critical and high vulnerabilities
        id: check-cves
        run: |
          critical=$(jq '.runs[].results | map(select(.level == "error")) | length' sarif.output.json)
          high=$(jq '.runs[].results | map(select(.level == "warning")) | length' sarif.output.json)
          if [ "$critical" -ne 0 ] || [ "$high" -ne 0 ]; then
            echo "Znaleziono zagrożenia critical albo high"
            exit 1
          else
            echo "Nie naleziono critical albo high zagrożeń"
          fi
      
      - name: Login to GitHub Container Registry
        if: ${{ steps.check-cves.outcome == 'success' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_GITHUB_TOKEN }}  # Use the updated secret name
      
      -
        name: Docker metadata definitions for GHCR
        id: meta-ghcr
        if: ${{ steps.check-cves.outcome == 'success' }}
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: latest

      -
        name: Build and push to GHCR
        if: ${{ steps.check-cves.outcome == 'success' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta-ghcr.outputs.tags }}
